@using System.Linq.Expressions;
<div class="item item-2 non-selectable">
    <div class="handle">
        <div class="non-selectabl up click-scale-down" 
             @onclick="PlusClicked" 
             @ontouchstart="StartIncrement" 
             @ontouchend="StopIncrement" 
             @onmousedown="@StartIncrement" 
             @onmouseup="@StopIncrement" >
            <i class="bi bi-plus-circle" style="font-size: 150%"></i>
        </div>
        <div class="non-selectabl down click-scale-down" 
             @onclick="MinusClicked" 
             @ontouchstart="StartDecrement" 
             @ontouchend="StopDecrement" 
             @onmousedown="@StartDecrement" 
             @onmouseup="@StopDecrement">
           <i class="bi bi-dash-circle" style="font-size: 150%"></i>
        </div>
    </div>
    <div class="detail" >
        <span style="font-size: 0.5rem">
            (@($"{Value:0}"))
        </span>
        <span>
            @($"{Display:0}")
        </span>
        <span>@Prefix</span>
    </div>
    
    @if (IsLedOn)
    {
        <div class="name led-on click-scale-down" style="cursor: pointer" @onclick="ToggleClick">
            @ControlText
        </div>
    }
    else
    {
        <div class="name click-scale-down" style="cursor: pointer" @onclick="ToggleClick">
            @ControlText
        </div>
    }
    
    
    
</div>

@code {
    
    /*hold btn functions*/

        private const int IncrementIntervalMilliseconds = 100;
    
    private bool  incrementing = false;
    private bool  decrementing = false;
    private async Task StartIncrement()
    {
        incrementing = true;
        while (incrementing)
        {
            await Task.Delay(IncrementIntervalMilliseconds);
            if (!incrementing) return;;
            PlusClicked(); // just click it fast!
            StateHasChanged(); // Notify Blazor to update the UI
        }
    }

    private void StopIncrement()
    {
        incrementing = false;
    }
    
    private async Task StartDecrement()
    {
        decrementing = true;
        while (decrementing)
        {
            await Task.Delay(IncrementIntervalMilliseconds);
            if (!decrementing) return;;
            MinusClicked(); // just click it fast!
            StateHasChanged(); // Notify Blazor to update the UI
        }
    }

    private void StopDecrement()
    {
        decrementing = false;
    }
    

    [CascadingParameter]
    EditContext EditContext { get; set; } = default!;

    [Parameter]
    public Expression<Func<double>> ValueExpression { get; set; }
    [Parameter]
    public Expression<Func<int>> SwitchExpression { get; set; }

    [Parameter]
    public string ControlText { get; set; } = "";

    private double _value = 0;

    [Parameter]
    public double Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
            var fieldIdentifier = FieldIdentifier.Create(ValueExpression);
            EditContext.NotifyFieldChanged(fieldIdentifier);
        }
    }

    [Parameter]
    public bool IsLedOn { get; set; } = true;

    [Parameter]
    public int Switch { get; set; } = -1;
    [Parameter]
    public EventCallback<int> SwitchChanged { get; set; }
    
    [Parameter]
    public double Display { get; set; }

    [Parameter]
    public string Prefix { get; set; }

    [Parameter]
    public double Step { set; get; } = 1;

    [Parameter]
    public double Minimum { get; set; } = 0;

    [Parameter]
    public double Maximum { get; set; } = double.MaxValue;

    private void PlusClicked()
    {
        Console.WriteLine($"Value: {Value} , MAX: {Maximum} , STEP: {Step}");
        Value = Math.Min(Maximum, Value + Step);
        // Value = Value >= Maximum ? Maximum : (Value + Step);
    }

    private void MinusClicked()
    {
        Console.WriteLine($"Value: {Value} , MIN: {Minimum} , STEP: {Step}");
        Value = Math.Max(Minimum, Value - Step);
        // Value = Value <= Minimum ? Minimum : (Value - Step);
    }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }
    
    [Parameter]
    public EventCallback<double> DisplayChanged { get; set; }
    
    [Parameter]
    public EventCallback? ToggleCallback { get; set; }

    public void ToggleClick()
    {
        ToggleCallback?.InvokeAsync();

        if (IsLedOn && Switch == -1)
        {
            Switch = 0;
            SwitchChanged.InvokeAsync(Switch);
            var fieldIdentifier = FieldIdentifier.Create(() => Switch);
            EditContext.NotifyFieldChanged(fieldIdentifier);
        }
        if (!IsLedOn && Switch == 0)
        {
            Switch = -1;
            SwitchChanged.InvokeAsync(Switch);
            var fieldIdentifier = FieldIdentifier.Create(()=> Switch);
            EditContext.NotifyFieldChanged(fieldIdentifier);
        }
    }
}