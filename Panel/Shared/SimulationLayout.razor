@using Panel16.AbrTools
@using AbrBlazorTools
@using global::AbrTools
@using Models.Identity
@using Models.Config
@using Microsoft.AspNetCore.SignalR.Client;
@using Panel16.Shared.Main

@inject ISimulationApi SimulationApi
@inherits LayoutComponentBase

@inject IChannel<SimulationModel> SimulationChanel

<MudThemeProvider Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<aside class="@(IsMenuOpen ? "open" : "")">
    <nav>
        <h3 class="title">@Simulation.Title</h3>
        <ul>
            <li>
                <a href="/">
                    <span>@localizer[LocalizationKeys.MainPage]</span>
                </a>
            </li>
            <li>
                <a><i class="fa fa-stopwatch"></i> Step: @Simulation.SimulationFeilds.OutputVals.Step</a>
            </li>
            <li>
                <a><i class="fa fa-hourglass"></i> Status : @(Simulation.SimulationFeilds.InputValues.status == 1 ? "running" : (Simulation.SimulationFeilds.InputValues.status == 3 ? "Stoped" : "Paused"))</a>
            </li>
            @if (Simulation.SimulationFeilds.InputValues.status == 1)
            {
                <li>

                    <a @onclick="() => PauseSim(Simulation)">
                        <i class="fa fa-pause"></i>Pause
                    </a>
                </li>
                <li>

                    <a @onclick="() => Stop(Simulation)">
                        <i class="fa fa-stop"></i>Stop
                    </a>
                </li>
            }
        </ul>
        @*
        <MudTreeView Items="NavMenuItems">
        <ItemTemplate>
        <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Items">
        <Content>
        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
        <a href="@context.Link">
        @if (context.HasIcon)
        {
        <i><MudIcon Icon="@Icons.Material.Filled.SupervisorAccount"></MudIcon></i>
        }
        <span>@context.Title</span>
        </a>
        </Content>
        </MudTreeViewItem>
        </ItemTemplate>
        </MudTreeView>
        <button class="btn btn-primary btn-block" @onclick="@(()=>NavigationManager.NavigateTo($"/Simulator_1?configId={ConfigId}"))">
        Start Simulation
        </button>*@
    </nav>
</aside>
<div class="dashboard-main layout-fixedmenu @(IsMenuOpen ? "menu-open" : "")">
    <header class="top-header fixed">
        <div class="top-header-left">
            <a class="menu itm" @onclick="ToggleMenu">
                <i class="fa fa-bars"></i>
            </a>

            <div class="info itm">
                <span> Sim speed: @Simulation.SimulationFeilds.InputValues.speed </span>
                <span> Sim time: @Simulation.SimulationFeilds.OutputVals.Step.DurationToStr(scale:100) </span>
            </div>


            <ul class="menu-links">
                <li>
                    <a href="/main?simulationId=@(SimulationId)">Main</a>
                </li>
                <li>
                    <a href="/BopPanel?simulationId=@(SimulationId)">Bop Panel</a>
                </li>
                <li>
                    <a href="/ChockPanel?simulationId=@(SimulationId)">Chock Panel</a>
                </li>

                <li>
                    <a href="/Pipes?simulationId=@(SimulationId)">Line Up</a>
                </li>

                @if (Statics.CurrentLoginInfo != null && (Statics.CurrentLoginInfo.IsAdmin || Statics.CurrentLoginInfo.IsDeveloper))
                {
                    <li>
                        <a href="/SimulationUsers?simulationId=@(SimulationId)">Users</a>
                    </li>
                }
            </ul>
        </div>
        <div class="top-header-right">
            <div class="itm lang">
                <CultureDropDown/>
            </div>
            <div class="itm logo">
                <img src="./assets/img/logo.png"/>
            </div>
        </div>
    </header>
    <main @onclick="HideMenu" class="dashboard-body">
        <div class="main-body">
            <CascadingValue Value=GetSimulation>
                <CascadingValue Value=ToggleMenu>
                    
                    <div id="new-desgin">
                    <div class="top">
                        <div class="controls">
                            @if (Simulation.SimulationFeilds.InputValues.status == 1)
                            {
                                <div class="stop" @onclick="()=>PauseSim(Simulation)">
                                    <i class="bi bi-pause"></i>
                                </div>
                            }
                            else
                            {
                                <div class="end" @onclick="()=>Stop(Simulation)">
                                    <i class="bi bi-stop-fill"></i>
                                </div>
                            }
                               
                            <div class="end">
                                <i class="bi bi-stop-fill"></i>
                            </div>
                        </div>
                               
                        <SpeedSelection @bind-Value="@Simulation.SimulationFeilds.InputValues.speed"/>
                               
                        <div class="timer" >
                            <div class="start"><span>R:</span> <span style="font-size: 0.8rem">
                                @Simulation.SimulationFeilds.OutputVals.Step.DurationToStr(100)
                            </span></div>
                            @* ..:.. *@
                            <div class="end"><span>S:</span> <span style="font-size: 0.8rem">
                                @Simulation.SimulationFeilds.OutputVals.Step.DurationToStr(100)
                            </span></div>
                        </div>
                        <div class="warning click-scale-down" style="cursor: pointer">
                            <i class="bi bi-exclamation-triangle"></i>
                        </div>
                        <div class="volume control click-scale-down" style="cursor: pointer;" @onclick="ToggleMute">
                            @if (IsMute)
                            {
                                <i class="bi bi-volume-mute"></i>
                            }
                            else
                            {
                                <i class="bi bi-volume-up"></i>
                            }
                        </div>
                               
                        <div class="mic control click-scale-down" @onclick="() => OnMicDown()">
                            @if (IsMicOn)
                            {
                                <i class="bi bi-mic"></i>
                            }
                            else
                            {
                                <i class="bi bi-mic-mute"></i>
                            }
                        </div>
                               
                               
                        @if (Statics.CurrentLoginInfo != null && (Statics.CurrentLoginInfo.IsAdmin || Statics.CurrentLoginInfo.IsDeveloper))
                        {
                            <div class="user">
                                <a href="/SimulationUsers?simulationId=@(SimulationId)">
                                    <i class="bi bi-person"></i>
                                </a>
                            </div>
                        }
                               
                        <div class="chat">
                            <a href="">
                                <i class="bi bi-chat-left"></i>
                            </a>
                        </div>
                               
                        @* @if (hubConnection?.State == HubConnectionState.Connected) *@
                        @if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
                        {
                            <div class="internet connect anim-blink pointer-event"> <!--change connect to disconnect to make it red-->
                                <i class="bi bi-circle-fill"></i>
                            </div>
                        }
                        else
                        {
                            <div class="internet disconnect">
                                <i class="bi bi-circle-fill"></i>
                            </div>
                        }
                               
                    </div>
                        @Body
                        
                    </div>
                    
                </CascadingValue>
            </CascadingValue>
        </div>
    </main>
</div>

@code {
    public EventCallback<SimulationModel> SimulationChangedCallBack;
    public MudTheme _theme = new MudTheme();
    public string ConfigId { set; get; }
    public string SimulationId { set; get; }
    private void ToggleMute() => IsMute = !IsMute;
    private bool IsMicOn { get; set; }
    private void OnMicDown() => IsMicOn = !IsMicOn;
    
    private bool IsMute { get; set; }

    public class NavMenuItem
    {
        public bool IsExpanded { get; set; }

        public string Title { get; set; }

        public string Icon { get; set; }

        public string Link { get; set; }

        public HashSet<NavMenuItem> Items { get; set; }

        public bool HasChild => Items != null && Items.Count > 0;
        public bool HasIcon => !string.IsNullOrWhiteSpace(Icon);
    }

    public HashSet<NavMenuItem> Items { get; set; }
    public HashSet<NavMenuItem> NavMenuItems = new HashSet<NavMenuItem>();
    protected SimulationModel Simulation { set; get; } = new();

    protected async Task PauseSim(SimulationModel sim)
    {
        var confirm = await Swal.ShowSwal(title: "", message: $"Are you sure to pause this simulation({sim.Title})?", icon: SweetAlertIcon.Question);
        if (!confirm.IsConfirmed)
            return;
        var res = await SimulationApi.Pause(sim.Id.Value);
        if (res.IsSuccessStatusCode)
            sim.IsRunning = false;
        else
            await Swal.ShowSwal(title: "", message: $"You can not pause This Simulation!", icon: SweetAlertIcon.Error);
        NavigationManager.NavigateTo("/");
    }

    protected async Task Stop(SimulationModel sim)
    {
        var confirm = await Swal.ShowSwal(title: "", message: $"Are you sure to Stop this simulation({sim.Title})?", icon: SweetAlertIcon.Question);
        if (!confirm.IsConfirmed)
            return;
        var res = await SimulationApi.Pause(sim.Id.Value);
        if (res.IsSuccessStatusCode)
            sim.IsRunning = false;
        else
            await Swal.ShowSwal(title: "", message: $"You can not Stop This Simulation!", icon: SweetAlertIcon.Error);
        NavigationManager.NavigateTo("/");
    }

    private HubConnection? hubConnection;

    protected override async void OnInitialized()
    {

        SimulationChanel.OnNewMessage += (channel, simulation) =>
        {
            if (channel == ChannelNames.BROADCAST_UPDATE_INPUTS)
                NotifyClientsForInputChange(simulation);
            if (channel == ChannelNames.TOGGLE_SLIPS)
                NotifyClientsForSlipsChange(simulation);
            if (channel == ChannelNames.TOGGLE_TONG)
                NotifyClientsForTongChange(simulation);
        };
        
    //_theme.Typography.Body1.FontFamily = new[] { "IRanSans" };
        SimulationId = UriExtenssions.GetQueryStringValue(NavigationManager.Uri, "simulationID");
        Simulation = await SimulationApi.GetFromRedis(new Guid(SimulationId));

        // Console.WriteLine("Layout Simulatnio OnInitialized as JSON : {0}", System.Text.Json.JsonSerializer.Serialize(Simulation));

    #region usless Nav

        NavMenuItems.Add(new NavMenuItem
        {
            Title = localizer[LocalizationKeys.MainPage],
            Link = "/",
            Icon = Icons.Material.Filled.Dashboard,
        });
        NavMenuItems.Add(new NavMenuItem
        {
            Title = "Rig",
            Link = "",
            Items = new HashSet<NavMenuItem>
            {
                new NavMenuItem
                {
                    Title = "Pumps",
                    Link = $"/SaveConfig_1?Id={ConfigId}",
                },
                new NavMenuItem
                {
                    Title = "BOP Stack",
                    Link = $"/SaveConfig_2?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "BOP control System",
                    Link = $"/SaveConfig_3?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "Choke manifold",
                    Link = $"/SaveConfig_4?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "Top Drive and Rotary Table",
                    Link = $"/SaveConfig_5?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "String Traveling settings",
                    Link = $"/SaveConfig_6?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "Active Tank",
                    Link = $"/SaveConfig_7?Id={ConfigId}"
                },
                new NavMenuItem
                {
                    Title = "Power of equipment",
                    Link = $"/SaveConfig_8?Id={ConfigId}"
                }
            }
        });

        NavMenuItems.Add(new NavMenuItem
        {
            Title = "Holes Settings",
            Link = $"/SaveConfig_10?Id={ConfigId}"
        });
        NavMenuItems.Add(new NavMenuItem
        {
            Title = "Formation data",
            Link = $"/SaveConfig_15?Id={ConfigId}",
            Items = new HashSet<NavMenuItem>

            {
                new NavMenuItem
                {
                    Title = "Leak-off Test",
                    Link = $"/SaveConfig_16?Id={ConfigId}",
                },
                new NavMenuItem
                {
                    Title = "Last Zone Data",
                    Link = $"/SaveConfig_17?Id={ConfigId}",
                },
                new NavMenuItem
                {
                    Title = "Reservoir Data",
                    Link = $"/SaveConfig_18?Id={ConfigId}",
                }
            }
        });
        NavMenuItems.Add(new NavMenuItem
        {
            Title = "Mud system",
            Link = $"/SaveConfig_19?Id={ConfigId}"
        });
        NavMenuItems.Add(new NavMenuItem
        {
            Title = "string components",
            Link = $"/SaveConfig_20?Id={ConfigId}"
        });

    #endregion

    //Console.WriteLine($"MY SIGNALR URL: {Statics.BaseAddress}SimulationHub");
        hubConnection = (new HubConnectionBuilder().WithAutomaticReconnect().WithUrl($"{Statics.BaseAddress}SimulationHub")).Build();

        hubConnection.On<SimulationModel>(ChannelNames.TOGGLE_SLIPS, async (newModel) =>
        {
            Console.WriteLine("Update-Outputs");
            if (newModel?.Id != Guid.Parse(SimulationId))
                return;
    // Simulation.SimulationFeilds.OutputVals = newModel.SimulationFeilds.OutputVals;

    // invoke children 
            SimulationChanel.SendMessage(ChannelNames.TOGGLE_SLIPS, newModel);

            StateHasChanged();
        });
        hubConnection.On<SimulationModel>(ChannelNames.TOGGLE_TONG, async (newModel) =>
        {
            Console.WriteLine("Update-Outputs");
            if (newModel?.Id != Guid.Parse(SimulationId))
                return;
    // Simulation.SimulationFeilds.OutputVals = newModel.SimulationFeilds.OutputVals;

    // invoke children 
            SimulationChanel.SendMessage(ChannelNames.TOGGLE_TONG, newModel);

            StateHasChanged();
        });
        hubConnection.On<SimulationModel>(ChannelNames.UPDATE_INPUTS, async (newModel) =>
        {
            Console.WriteLine("Update-Outputs");
            if (newModel?.Id != Guid.Parse(SimulationId))
                return;
    // Simulation.SimulationFeilds.OutputVals = newModel.SimulationFeilds.OutputVals;

    // invoke children 
            SimulationChanel.SendMessage(ChannelNames.UPDATE_INPUTS, newModel);

            StateHasChanged();
        });
        hubConnection.On<SimulationModel>(ChannelNames.UPDATE_OUTPUTS, async (newModel) =>
        {
            Console.WriteLine("Update-Outputs");
            if (newModel?.Id != Guid.Parse(SimulationId))
                return;
    // Simulation.SimulationFeilds.OutputVals = newModel.SimulationFeilds.OutputVals;

    // invoke children 
            SimulationChanel.SendMessage(ChannelNames.UPDATE_OUTPUTS, newModel);

            StateHasChanged();
        });
        await hubConnection.StartAsync();
        NavigationManager.LocationChanged += LocationChanged;
        await CheckLogin();
        base.OnInitialized();
    }

    private async Task NotifyClientsForTongChange(SimulationModel simulation)
    {
        if (hubConnection is {State: HubConnectionState.Connected })
        {
            await hubConnection?.SendAsync("ToggleTong" , simulation);
        }
    }

    private async Task NotifyClientsForSlipsChange(SimulationModel simulation)
    {
        if (hubConnection is {State: HubConnectionState.Connected })
        {
            await hubConnection?.SendAsync("ToggleSilipsStand" , simulation);
        }
    }

    bool IsMenuOpen { set; get; } = false;

    protected void ToggleMenu()
    {
        Console.WriteLine("Toggle MENU Applyed");
        IsMenuOpen = !IsMenuOpen;
        StateHasChanged();
    }

    protected void HideMenu()
    {
        IsMenuOpen = false;
        StateHasChanged();
    }


    // EventCallback ToggleMenuCallback => EventCallback.Factory.Create(this, ToggleMenu);


    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        IsMenuOpen = false;
        await CheckLogin();
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            await CheckLogin();
        base.OnAfterRender(firstRender);
    }

    async Task CheckLogin()
    {
        Console.WriteLine("" + Statics.LastCheck);
        if (Statics.LastCheck.HasValue && DateTime.Now.Subtract(Statics.LastCheck.Value).TotalMinutes < 5)
        {
            Console.WriteLine("less than 5 minutes login check");
            base.OnInitialized();
            return;
        }
        Console.WriteLine("checking login...");
        Statics.LastCheck = DateTime.Now;
        var hasToken = await LocalStorage.ContainKeyAsync(AbrBlazorTools.Statics.LoginTokenKey);
        if (!hasToken)
            NavigationManager.NavigateTo("/login");
        else
        {
            var token = await LocalStorage.GetItemAsStringAsync(Statics.LoginTokenKey);
            var res = await HttpClientWithToken.HttpGet("/api/Auth/CheckLogin");
            var result =
                JsonConvert.DeserializeObject<CheckLoginResponse>
                    (
                        await res.Content.ReadAsStringAsync());
            if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var refreshRes = await HttpClientWithToken.HttpPost("/api/Auth/refresh", new RefreshTokenModel
                {
                    Token = token
                });
                if (refreshRes.IsSuccessStatusCode)
                {
                    var newToken = JsonConvert.DeserializeObject<PlainToken>
                        (await refreshRes.Content.ReadAsStringAsync());
                    Statics.LoginTokenKey = newToken.AccessToken;
                    Statics.RefreshTokenKey = newToken.RefreshToken;
                    await LocalStorage.SetItemAsync(AbrBlazorTools.Statics.LoginTokenKey, Statics.LoginTokenKey);
                    await LocalStorage.SetItemAsync(AbrBlazorTools.Statics.RefreshTokenKey, Statics.RefreshTokenKey);
                }
            }
            if (!res.IsSuccessStatusCode)
            {
                await LoadingSpinner.HideLoading();
                await Swal.ShowSwal(title: "", message: localizer[LocalizationKeys.InvalidCredential], SweetAlertIcon.Error);
                NavigationManager.NavigateTo("/login");
            }
            await LoadingSpinner.HideLoading();
            Statics.CurrentLoginInfo = result;
            StateHasChanged();
        }
    }

    private async void SignOut()
    {
        await LocalStorage.RemoveItemAsync(Statics.LoginTokenKey);
        await LocalStorage.RemoveItemAsync(Statics.RefreshTokenKey);
        NavigationManager.NavigateTo("/login");
    }

    private SimulationModel GetSimulation() => Simulation;

    private async Task NotifyClientsForInputChange(SimulationModel simulation)
    {
        // UPDATE LOCAL INPUTS
        Simulation.SimulationFeilds.InputValues = simulation.SimulationFeilds.InputValues;
        
        // if (DateTime.Now.Subtract(Lastupdate).TotalMilliseconds < 100)
            // return;
        Console.WriteLine("OnFieldChanged");
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("UpdateModel", simulation);
        }
    }

}